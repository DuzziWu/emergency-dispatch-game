'use client'

import { useState, useEffect } from 'react'
import { supabase } from '@/lib/supabase'
import type { Station, StationBlueprint, VehicleType, Vehicle } from '@/types/database'

interface StationManagementProps {
  station: Station
  blueprint: StationBlueprint
  onClose: () => void
  userId: string
}

type TabType = 'overview' | 'vehicles' | 'personnel' | 'extensions'
type VehicleCategoryType = 'LF' | 'TLF' | 'Sonstige'

export default function StationManagement({ station, blueprint, onClose, userId }: StationManagementProps) {
  const [activeTab, setActiveTab] = useState<TabType>('overview')
  const [vehicleTypes, setVehicleTypes] = useState<VehicleType[]>([])
  const [stationVehicles, setStationVehicles] = useState<Vehicle[]>([])
  const [selectedVehicleType, setSelectedVehicleType] = useState<VehicleType | null>(null)
  const [showVehiclePurchase, setShowVehiclePurchase] = useState(false)
  const [selectedParkingSlot, setSelectedParkingSlot] = useState<number | null>(null)
  const [stationAddress, setStationAddress] = useState<string>('Adresse wird geladen...')
  const [activeVehicleCategory, setActiveVehicleCategory] = useState<VehicleCategoryType>('LF')

  // Function to map vehicle type names to image filenames
  const getVehicleImageName = (vehicleType: VehicleType): string => {
    // Map vehicle type names to the actual filenames in Supabase storage
    const nameMap: Record<string, string> = {
      'DLK 23': 'dlk_23',
      'ELW 1': 'elw_1', 
      'ELW 2': 'elw_2',
      'HLF 10': 'hlf_10',
      'HLF 20': 'hlf_20',
      'KTW': 'ktw',
      'LF 10': 'lf_10',
      'LF 16': 'lf_16',
      'LF 20': 'lf_20',
      'LF 8': 'lf_8',
      'MTF': 'mtf',
      'NEF': 'nef',
      'RTW': 'rtw',
      'RW': 'rw',
      'TLF 3000': 'tlf_3000',
      'TLF 4000': 'tlf_4000'
    }
    
    return nameMap[vehicleType.name] || vehicleType.name.toLowerCase().split(' ').join('_')
  }

  // Load vehicle types, station vehicles, and address
  useEffect(() => {
    loadVehicleTypes()
    loadStationVehicles()
    loadStationAddress()
  }, [])

  const loadStationAddress = async () => {
    try {
      const response = await fetch(
        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${blueprint.lat}&lon=${blueprint.lng}&zoom=18&addressdetails=1`
      )
      const data = await response.json()
      
      if (data && data.display_name) {
        // Extract meaningful address parts
        const address = data.address || {}
        const street = address.road || ''
        const houseNumber = address.house_number || ''
        const city = address.city || address.town || address.village || blueprint.city
        const postcode = address.postcode || ''
        
        let formattedAddress = ''
        if (street) {
          formattedAddress = street
          if (houseNumber) formattedAddress += ` ${houseNumber}`
          if (postcode && city) formattedAddress += `, ${postcode} ${city}`
          else if (city) formattedAddress += `, ${city}`
        } else {
          formattedAddress = city
        }
        
        setStationAddress(formattedAddress || blueprint.city)
      } else {
        setStationAddress(blueprint.city)
      }
    } catch (error) {
      console.error('Error loading address:', error)
      setStationAddress(blueprint.city)
    }
  }

  const loadVehicleTypes = async () => {
    try {
      const { data, error } = await supabase
        .from('vehicle_types')
        .select('*')
        .eq('required_station_type', blueprint.type)
        .order('cost')
      
      if (error) throw error
      setVehicleTypes(data || [])
    } catch (error) {
      console.error('Error loading vehicle types:', error)
    }
  }

  const loadStationVehicles = async () => {
    try {
      const { data, error } = await supabase
        .from('vehicles')
        .select('*, vehicle_types(*)')
        .eq('station_id', station.id)
      
      if (error) throw error
      setStationVehicles(data || [])
    } catch (error) {
      console.error('Error loading station vehicles:', error)
    }
  }

  const handleVehiclePurchase = async (vehicleType: VehicleType) => {
    if (!selectedParkingSlot) return

    try {
      const { data, error } = await supabase
        .from('vehicles')
        .insert([{
          user_id: userId,
          station_id: station.id,
          vehicle_type_id: vehicleType.id,
          status: 'at_station',
          assigned_personnel: vehicleType.personnel_requirement
        }])
      
      if (error) throw error
      
      // Reload vehicles and close purchase dialog
      loadStationVehicles()
      setShowVehiclePurchase(false)
      setSelectedVehicleType(null)
      setSelectedParkingSlot(null)
    } catch (error) {
      console.error('Error purchasing vehicle:', error)
    }
  }

  const renderTabContent = () => {
    switch (activeTab) {
      case 'overview':
        return (
          <div className="p-8 space-y-8">
            <div className="grid grid-cols-2 gap-6">
              <div className="bg-gray-800/60 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
                <div className="flex items-center gap-4 mb-3">
                  <div className="p-2 bg-blue-500/20 rounded-lg">
                    <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                    </svg>
                  </div>
                  <h3 className="text-sm font-medium text-gray-300">Wachentyp</h3>
                </div>
                <p className="text-xl font-bold text-white">
                  {blueprint.type === 'fire_station' ? 'Feuerwehr' : 'Rettungsdienst'}
                </p>
              </div>
              
              <div className="bg-gray-800/60 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
                <div className="flex items-center gap-4 mb-3">
                  <div className="p-2 bg-purple-500/20 rounded-lg">
                    <svg className="w-5 h-5 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                    </svg>
                  </div>
                  <h3 className="text-sm font-medium text-gray-300">Level</h3>
                </div>
                <p className="text-xl font-bold text-purple-400">Level {station.level}</p>
              </div>
              
              <div className="bg-gray-800/60 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
                <div className="flex items-center gap-4 mb-3">
                  <div className="p-2 bg-green-500/20 rounded-lg">
                    <svg className="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                  </div>
                  <h3 className="text-sm font-medium text-gray-300">Fahrzeugpl√§tze</h3>
                </div>
                <p className="text-xl font-bold text-white">
                  <span className="text-green-400">{stationVehicles.length}</span>
                  <span className="text-gray-500"> / </span>
                  <span>{station.vehicle_slots}</span>
                </p>
              </div>
              
              <div className="bg-gray-800/60 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
                <div className="flex items-center gap-4 mb-3">
                  <div className="p-2 bg-orange-500/20 rounded-lg">
                    <svg className="w-5 h-5 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0" />
                    </svg>
                  </div>
                  <h3 className="text-sm font-medium text-gray-300">Personal</h3>
                </div>
                <p className="text-xl font-bold text-white">
                  <span className="text-orange-400">{stationVehicles.reduce((sum, v) => sum + v.assigned_personnel, 0)}</span>
                  <span className="text-gray-500"> / </span>
                  <span>{station.personnel_capacity}</span>
                </p>
              </div>
            </div>
            
            <div className="bg-gray-800/60 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
              <div className="flex items-center gap-4 mb-4">
                <div className="p-2 bg-blue-500/20 rounded-lg">
                  <svg className="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-white">Standort</h3>
              </div>
              <div className="ml-12">
                <p className="text-white font-medium">{stationAddress}</p>
              </div>
            </div>
            
            <div className="bg-gray-800/60 backdrop-blur-sm rounded-xl p-6 border border-gray-700/50">
              <div className="flex items-center gap-4 mb-4">
                <div className="p-2 bg-yellow-500/20 rounded-lg">
                  <svg className="w-5 h-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100-4m0 4v2m0-6V4" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-white">Erweiterungen</h3>
              </div>
              <div className="ml-12">
                {Object.entries(station.extensions).length === 0 ? (
                  <p className="text-gray-400">Keine Erweiterungen vorhanden</p>
                ) : (
                  <div className="grid grid-cols-2 gap-3">
                    {Object.entries(station.extensions).map(([key, value]) => (
                      <div key={key} className={`px-4 py-2 rounded-lg text-sm font-medium ${value ? 'bg-green-600/20 text-green-400 border border-green-500/30' : 'bg-gray-600/20 text-gray-300 border border-gray-500/30'}`}>
                        {key}
                      </div>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        )

      case 'vehicles':
        return (
          <div className="p-8">
            <div className="mb-8">
              <h3 className="text-xl font-semibold mb-6 flex items-center gap-3">
                <div className="p-2 bg-blue-500/20 rounded-lg">
                  <svg className="w-6 h-6 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17a2 2 0 11-4 0 2 2 0 014 0zM21 17a2 2 0 11-4 0 2 2 0 014 0zM7 9l4-4V3M17 9l-4-4V3M7 9v6h10V9M7 9H3M17 9h4" />
                  </svg>
                </div>
                Fahrzeugstellpl√§tze
              </h3>
              
              <div className="grid grid-cols-2 gap-6">
                {Array.from({ length: station.vehicle_slots }, (_, index) => {
                  const vehicle = stationVehicles[index]
                  const vehicleType = vehicle ? (vehicle as any).vehicle_types : null
                  const getBOSStatusText = (status: number) => {
                    const statusTexts = {
                      1: 'Einsatzbereit √ºber Funk',
                      2: 'Einsatzbereit am Standort', 
                      3: 'Einsatzfahrt',
                      4: 'Am Einsatzort angekommen',
                      5: 'Sprechwunsch',
                      6: 'Nicht einsatzbereit',
                      7: 'Patient im Fahrzeug',
                      8: 'Am Zielort angekommen',
                      9: 'Einsatzbereit am Standort'
                    }
                    return statusTexts[status as keyof typeof statusTexts] || `Status ${status}`
                  }
                  
                  return (
                    <div
                      key={index}
                      className={`relative bg-gray-800/60 backdrop-blur-sm rounded-xl border-2 border-dashed transition-all duration-300 cursor-pointer group h-64 flex flex-col ${
                        vehicle 
                          ? 'border-green-500/50 bg-green-500/5 hover:bg-green-500/10' 
                          : 'border-gray-600 hover:border-blue-500/50 hover:bg-blue-500/5'
                      }`}
                      onClick={() => {
                        if (!vehicle) {
                          setSelectedParkingSlot(index + 1)
                          setShowVehiclePurchase(true)
                        }
                      }}
                    >
                      <div className="absolute top-4 left-4 text-xs font-medium text-gray-400">
                        Stellplatz {index + 1}
                      </div>
                      
                      {vehicle ? (
                        <div className="text-center p-6 pt-12 flex-1 flex flex-col">
                          {/* Vehicle Image */}
                          <div className="mb-4 flex justify-center flex-1">
                            <div className="relative w-24 h-16 bg-gray-700/50 rounded-lg flex items-center justify-center">
                              {vehicleType && (
                                <img 
                                  src={`https://ilnrpwrzwbgqzurddxrp.supabase.co/storage/v1/object/public/vehicle-images/${getVehicleImageName(vehicleType)}.png`}
                                  alt={vehicleType.name}
                                  className="w-full h-full object-contain rounded-lg"
                                  onError={(e) => {
                                    // Fallback to icon if image fails
                                    e.currentTarget.style.display = 'none'
                                    e.currentTarget.nextElementSibling?.classList.remove('hidden')
                                  }}
                                />
                              )}
                              <svg className="w-8 h-8 text-gray-400 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17a2 2 0 11-4 0 2 2 0 014 0zM21 17a2 2 0 11-4 0 2 2 0 014 0zM7 9l4-4V3M17 9l-4-4V3M7 9v6h10V9M7 9H3M17 9h4" />
                              </svg>
                            </div>
                          </div>
                          
                          <div className="flex-1">
                            <h4 className="font-semibold text-lg mb-2 text-white">
                              {vehicle.callsign || `Fahrzeug ${index + 1}`}
                            </h4>
                            
                            <div className={`inline-flex items-center gap-2 px-3 py-1.5 rounded-full text-xs font-medium mb-2 ${
                              (vehicle.bos_status === 1 || vehicle.bos_status === 2 || vehicle.bos_status === 9)
                                ? 'bg-green-600/20 text-green-400 border border-green-500/30'
                                : vehicle.bos_status === 6
                                ? 'bg-red-600/20 text-red-400 border border-red-500/30'
                                : 'bg-orange-600/20 text-orange-400 border border-orange-500/30'
                            }`}>
                              <div className={`w-2 h-2 rounded-full ${
                                (vehicle.bos_status === 1 || vehicle.bos_status === 2 || vehicle.bos_status === 9) 
                                  ? 'bg-green-400' 
                                  : vehicle.bos_status === 6 
                                  ? 'bg-red-400' 
                                  : 'bg-orange-400'
                              }`}></div>
                              Status {vehicle.bos_status || 2}
                            </div>
                            
                            <p className="text-xs text-gray-400">
                              {getBOSStatusText(vehicle.bos_status || 2)}
                            </p>
                          </div>
                        </div>
                      ) : (
                        <div className="text-center p-6 pt-12 flex-1 flex flex-col justify-center">
                          <div className="mb-4 flex justify-center">
                            <div className="p-4 bg-gray-600/20 rounded-full border-2 border-dashed border-gray-500 group-hover:border-blue-400 group-hover:bg-blue-500/10 transition-all duration-300">
                              <svg className="w-8 h-8 text-gray-500 group-hover:text-blue-400 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                              </svg>
                            </div>
                          </div>
                          <p className="text-gray-400 group-hover:text-blue-400 transition-colors duration-300 font-medium">
                            Fahrzeug kaufen
                          </p>
                          <p className="text-xs text-gray-500 mt-1">Klicken zum Ausw√§hlen</p>
                        </div>
                      )}
                    </div>
                  )
                })}
              </div>
            </div>
          </div>
        )

      case 'personnel':
        return (
          <div className="p-6">
            <div className="bg-gray-800 rounded-lg p-4 mb-6">
              <h3 className="text-lg font-semibold mb-4">Personal-√úbersicht</h3>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-sm text-gray-400">Gesamt Personal</p>
                  <p className="text-2xl font-bold text-blue-400">
                    {stationVehicles.reduce((sum, v) => sum + v.assigned_personnel, 0)}
                  </p>
                </div>
                <div>
                  <p className="text-sm text-gray-400">Verf√ºgbare Pl√§tze</p>
                  <p className="text-2xl font-bold text-green-400">
                    {station.personnel_capacity - stationVehicles.reduce((sum, v) => sum + v.assigned_personnel, 0)}
                  </p>
                </div>
              </div>
            </div>
            
            <div className="space-y-4">
              <button className="w-full bg-blue-600 hover:bg-blue-500 text-white px-4 py-3 rounded-lg transition-colors">
                Personal anwerben
              </button>
              
              <button className="w-full bg-gray-700 hover:bg-gray-600 text-white px-4 py-3 rounded-lg transition-colors">
                Alle Mitarbeiter anzeigen
              </button>
              
              <div className="bg-gray-800 rounded-lg p-4">
                <h4 className="font-semibold mb-2">Personal-Verteilung</h4>
                {stationVehicles.length === 0 ? (
                  <p className="text-gray-500 text-sm">Keine Fahrzeuge vorhanden</p>
                ) : (
                  stationVehicles.map((vehicle, index) => (
                    <div key={vehicle.id} className="flex justify-between items-center py-2 border-b border-gray-700 last:border-0">
                      <span className="text-sm">
                        {(vehicle as any).vehicle_types?.name || `Fahrzeug ${index + 1}`}
                      </span>
                      <span className="text-sm text-blue-400">
                        {vehicle.assigned_personnel} Personen
                      </span>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        )

      case 'extensions':
        const extensions = [
          { 
            key: 'expansion', 
            name: 'Wache erweitern', 
            description: '+2 Fahrzeugpl√§tze, +10 Personal', 
            cost: 100000,
            icon: <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
            </svg>
          },
          { 
            key: 'training_room', 
            name: 'Schulungsraum', 
            description: 'Schnellere Personal-Ausbildung', 
            cost: 50000,
            icon: <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.247 18 16.5 18c-1.746 0-3.332.477-4.5 1.253" />
            </svg>
          },
          { 
            key: 'ems_annex', 
            name: 'Integrierte Rettungswache', 
            description: 'Auch Rettungsfahrzeuge kaufbar', 
            cost: 75000,
            icon: <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
            </svg>
          },
          { 
            key: 'maintenance_hall', 
            name: 'Fahrzeugwartungshalle', 
            description: 'Reduzierte Reparaturkosten', 
            cost: 80000,
            icon: <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
            </svg>
          }
        ]

        return (
          <div className="p-8">
            <h3 className="text-xl font-semibold mb-8 flex items-center gap-3">
              <div className="p-2 bg-purple-500/20 rounded-lg">
                <svg className="w-6 h-6 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100-4m0 4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100-4m0 4v2m0-6V4" />
                </svg>
              </div>
              Verf√ºgbare Erweiterungen
            </h3>
            
            <div className="grid gap-6">
              {extensions.map((extension) => {
                const isBuilt = station.extensions[extension.key] === true
                const canAfford = true // TODO: Check user credits
                
                return (
                  <div key={extension.key} className={`bg-gray-800/60 backdrop-blur-sm rounded-xl p-6 border transition-all duration-300 ${
                    isBuilt 
                      ? 'border-green-500/50 bg-green-500/5' 
                      : 'border-gray-700/50 hover:border-gray-600/50'
                  }`}>
                    <div className="flex items-start gap-6">
                      <div className={`p-3 rounded-lg ${
                        isBuilt 
                          ? 'bg-green-500/20 border border-green-500/30 text-green-400' 
                          : 'bg-blue-500/20 border border-blue-500/30 text-blue-400'
                      }`}>
                        {extension.icon}
                      </div>
                      
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-3">
                          <h4 className="font-semibold text-xl text-white">
                            {extension.name}
                          </h4>
                          {isBuilt && (
                            <div className="flex items-center gap-2 px-3 py-1 bg-green-500/20 text-green-400 rounded-full text-sm font-medium border border-green-500/30">
                              <div className="w-2 h-2 bg-green-400 rounded-full"></div>
                              Gebaut
                            </div>
                          )}
                        </div>
                        
                        <p className="text-gray-400 mb-4 text-base leading-relaxed">
                          {extension.description}
                        </p>
                        
                        {!isBuilt && (
                          <div className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <svg className="w-5 h-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />
                              </svg>
                              <span className="text-yellow-400 font-bold text-lg">
                                ‚Ç¨ {extension.cost.toLocaleString()}
                              </span>
                            </div>
                            
                            <button 
                              className={`px-6 py-3 rounded-lg font-medium transition-all duration-200 ${
                                canAfford 
                                  ? 'bg-green-600 hover:bg-green-500 text-white hover:shadow-lg hover:shadow-green-500/25' 
                                  : 'bg-gray-600 text-gray-400 cursor-not-allowed'
                              }`}
                              disabled={!canAfford}
                            >
                              Bauen
                            </button>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )
              })}
            </div>
          </div>
        )

      default:
        return null
    }
  }

  return (
    <>
      {/* Custom scrollbar styles */}
      <style jsx>{`
        .custom-scrollbar::-webkit-scrollbar {
          width: 8px;
        }
        
        .custom-scrollbar::-webkit-scrollbar-track {
          background: rgba(31, 41, 55, 0.3);
          border-radius: 4px;
        }
        
        .custom-scrollbar::-webkit-scrollbar-thumb {
          background: rgba(75, 85, 99, 0.6);
          border-radius: 4px;
          border: 1px solid rgba(75, 85, 99, 0.4);
        }
        
        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
          background: rgba(107, 114, 128, 0.8);
        }
        
        .custom-scrollbar {
          scrollbar-width: thin;
          scrollbar-color: rgba(75, 85, 99, 0.6) rgba(31, 41, 55, 0.3);
        }
      `}</style>

      {/* Blurred Background - Keep map visible */}
      <div 
        className="absolute inset-0 backdrop-blur-sm z-[1001]" 
        onClick={onClose} 
      />
      
      {/* Side Menu - Even wider for better spacing */}
      <div className="absolute left-0 top-0 bottom-0 w-[800px] bg-gray-900/95 backdrop-blur-xl shadow-2xl border-r border-gray-700 z-[1002] flex flex-col">
        {/* Header */}
        <div className="bg-gray-800/90 p-8 border-b border-gray-700/50">
          <div className="flex items-center justify-between mb-3">
            <h2 className="text-2xl font-bold text-white flex items-center gap-4">
              {blueprint.type === 'fire_station' ? (
                <div className="p-3 bg-red-600/20 rounded-lg border border-red-500/30">
                  <svg className="w-8 h-8 text-red-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M12 2C8.7 2 6 4.7 6 8c0 2.1.8 3.9 2.1 5.3L12 18l3.9-4.7C17.2 11.9 18 10.1 18 8c0-3.3-2.7-6-6-6zm0 8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"/>
                  </svg>
                </div>
              ) : (
                <div className="p-3 bg-orange-600/20 rounded-lg border border-orange-500/30">
                  <svg className="w-8 h-8 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                  </svg>
                </div>
              )}
              {station.name}
            </h2>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-white transition-colors"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          <p className="text-gray-400 text-sm">{blueprint.city}</p>
        </div>

        {/* Tab Navigation */}
        <div className="bg-gray-800/90 border-b border-gray-700/50">
          <div className="flex">
            {[
              { 
                key: 'overview', 
                label: '√úbersicht',
                icon: <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
              },
              { 
                key: 'vehicles', 
                label: 'Fahrzeuge',
                icon: <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                </svg>
              },
              { 
                key: 'personnel', 
                label: 'Personal',
                icon: <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                </svg>
              },
              { 
                key: 'extensions', 
                label: 'Erweiterungen',
                icon: <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                </svg>
              }
            ].map((tab) => (
              <button
                key={tab.key}
                onClick={() => setActiveTab(tab.key as TabType)}
                className={`flex-1 px-6 py-4 text-sm font-medium transition-all duration-200 border-b-2 flex flex-col items-center gap-2 ${
                  activeTab === tab.key
                    ? 'border-blue-500 text-blue-400 bg-blue-500/10'
                    : 'border-transparent text-gray-400 hover:text-gray-200 hover:bg-gray-700/30'
                }`}
              >
                <span className={`transition-colors ${activeTab === tab.key ? 'text-blue-400' : 'text-gray-500'}`}>
                  {tab.icon}
                </span>
                <span className="text-xs">{tab.label}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Tab Content */}
        <div className="flex-1 overflow-y-auto text-white custom-scrollbar">
          {renderTabContent()}
        </div>
      </div>

      {/* Vehicle Purchase Dialog */}
      {showVehiclePurchase && (
        <div className="absolute inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-[1003]">
          <div className="bg-gray-800/95 backdrop-blur-xl rounded-xl border border-gray-700 p-8 max-w-6xl w-full mx-4 text-white h-[85vh] overflow-y-auto custom-scrollbar">
            {/* Header with Back Button */}
            <div className="flex items-center gap-4 mb-6">
              <button
                onClick={() => {
                  setShowVehiclePurchase(false)
                  setSelectedVehicleType(null)
                  setSelectedParkingSlot(null)
                }}
                className="p-2 bg-gray-700 hover:bg-gray-600 rounded-lg transition-colors"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <div>
                <h3 className="text-2xl font-bold">Fahrzeug kaufen</h3>
                <p className="text-gray-400">Stellplatz {selectedParkingSlot} - {blueprint.type === 'fire_station' ? 'Feuerwehr' : 'Rettungsdienst'}</p>
              </div>
            </div>

            {(() => {
              // Filter and categorize vehicles
              const filteredVehicles = vehicleTypes.filter(v => v.required_station_type === blueprint.type)
              
              const categorizedVehicles = {
                LF: filteredVehicles.filter(v => v.subcategory === 'LF'),
                TLF: filteredVehicles.filter(v => v.subcategory === 'TLF'), 
                Sonstige: filteredVehicles.filter(v => !v.subcategory || (v.subcategory !== 'LF' && v.subcategory !== 'TLF'))
              }

              const availableCategories = Object.entries(categorizedVehicles).filter(([_, vehicles]) => vehicles.length > 0)

              return (
                <div>
                  {/* Category Tabs */}
                  <div className="flex border-b border-gray-600 mb-6">
                    {availableCategories.map(([category, _]) => (
                      <button
                        key={category}
                        onClick={() => setActiveVehicleCategory(category as VehicleCategoryType)}
                        className={`px-6 py-3 text-sm font-medium transition-colors border-b-2 ${
                          activeVehicleCategory === category
                            ? 'border-blue-500 text-blue-400'
                            : 'border-transparent text-gray-400 hover:text-gray-200'
                        }`}
                      >
                        {category === 'LF' ? 'L√∂schfahrzeuge' : category === 'TLF' ? 'Tankl√∂schfahrzeuge' : 'Sonstige Fahrzeuge'}
                      </button>
                    ))}
                  </div>

                  {/* Vehicle Grid for Active Category */}
                  <div className="grid grid-cols-3 gap-4 mb-6">
                    {categorizedVehicles[activeVehicleCategory]?.map((vehicleType) => (
                        <button
                          key={vehicleType.id}
                          onClick={() => setSelectedVehicleType(vehicleType)}
                          className={`text-left p-6 rounded-xl border-2 transition-all duration-200 ${
                            selectedVehicleType?.id === vehicleType.id
                              ? 'border-blue-500 bg-blue-500/10'
                              : 'border-gray-600 bg-gray-700/50 hover:border-gray-500 hover:bg-gray-700/80'
                          }`}
                        >
                          <div className="flex gap-4">
                            {/* Vehicle Image */}
                            <div className="w-20 h-12 bg-gray-600/50 rounded-lg flex items-center justify-center flex-shrink-0">
                              <img 
                                src={`https://ilnrpwrzwbgqzurddxrp.supabase.co/storage/v1/object/public/vehicle-images/${getVehicleImageName(vehicleType)}.png`}
                                alt={vehicleType.name}
                                className="w-full h-full object-contain rounded-lg"
                                onError={(e) => {
                                  e.currentTarget.style.display = 'none'
                                  e.currentTarget.nextElementSibling?.classList.remove('hidden')
                                }}
                              />
                              <svg className="w-6 h-6 text-gray-400 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17a2 2 0 11-4 0 2 2 0 014 0zM21 17a2 2 0 11-4 0 2 2 0 014 0zM7 9l4-4V3M17 9l-4-4V3M7 9v6h10V9M7 9H3M17 9h4" />
                              </svg>
                            </div>
                            
                            <div className="flex-1">
                              <h5 className="font-semibold text-lg mb-2">{vehicleType.name}</h5>
                              <div className="flex items-center gap-4 text-sm text-gray-400 mb-3">
                                <span className="flex items-center gap-1">
                                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                  </svg>
                                  {vehicleType.personnel_requirement} Personal
                                </span>
                              </div>
                              <div className="flex items-center justify-between">
                                <span className="text-yellow-400 font-bold text-xl">
                                  ‚Ç¨ {vehicleType.cost.toLocaleString()}
                                </span>
                                {selectedVehicleType?.id === vehicleType.id && (
                                  <div className="w-3 h-3 bg-blue-400 rounded-full"></div>
                                )}
                              </div>
                            </div>
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>
                </div>
              )
            })()}
            
            {/* Purchase Button */}
            {selectedVehicleType && (
              <div className="p-4 bg-gray-700/50 rounded-xl border border-gray-600">
                <div className="flex items-center justify-between">
                  <div>
                    <h5 className="font-semibold text-lg">{selectedVehicleType.name}</h5>
                    <p className="text-gray-400">Stellplatz {selectedParkingSlot}</p>
                  </div>
                  <button
                    onClick={() => handleVehiclePurchase(selectedVehicleType)}
                    className="px-8 py-3 bg-green-600 hover:bg-green-500 text-white rounded-lg font-medium transition-colors"
                  >
                    Kaufen - ‚Ç¨ {selectedVehicleType.cost.toLocaleString()}
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      )}
    </>
  )
}